You should develop:

  // On save(), check if the entity already exists and then perform the create or update.
  // With respect to doing the "create if not exists, else update", that's the type of complex data access logic that we don't want any other constructs in our domain to have to know about: only the repos should care about that.
  // https://khalilstemmler.com/articles/typescript-domain-driven-design/repository-dto-mapper/

  Customer:
  
  ☐ Filter by state;
  ☐ Search by name and/or last name;
  ☐ Pagination to navigate between cards;
  ☐ Navigation when clicking on customer cards;
  ☐ An internal page with more details of customers (use your creativity);
  ☐ We'll be happy (😍) if you write tests for it.
  
  Customers:
    ✔ Listar e criar todos as features @done(22-05-17 08:13)
    ✔ Checar as features @done(22-08-11 18:04)
      ✔ Mudar estrutura de pastas e deixar por feature @done(22-08-11 18:04)
    ✔ Ajustar interface (e DTO) de Customer pra receber PhoneType @done(22-09-14 20:35)
    ✔ Ajustar Update, que está falhando provavelmente por causa do item acima @done(22-09-13 21:12)
    ✘ Age não precisa ser passado, dá pra ser calculado no BE e passado pro BD @cancelled(22-09-14 20:35)
    ✔ Pro BE receber o ID da role, o FE precisa saber qual ID é de qual role, portanto enviar nome e ID no GET de Customer @done(22-09-14 21:55)
    ✔ Fazer Upsert pro Location no updateCustomer method @done(22-09-13 21:04)
    ✔ Mudar o getByEmail porque não consigo usar um trycatch na CreateController. Se a query der algum erro inesperado, preciso pegar com o catch e encerrar (return), mas já tem um return no try, então com dois return o resto do código fica inacessíve. Isso se resolve se ao invés de retornar um erro quando o customer não for encontrado, eu retornar o array vazio. @done(22-09-11 20:54)
      ✔ Por enquanto, na CreateController, to deixando o catch vazio, mas a ideia é removê-lo. @done(22-09-13 21:12)
    ✔ A query pra pegar dados de customers e locations não tá rolando, preciso descobrir como fazer @done(22-09-11 20:54)

    ☐ Create Customer
      ✔ Domain @done(22-08-11 18:18)
        ✔ Entity @done(22-08-11 18:18)
        ✔ Interface @done(22-08-11 18:18)
      ✔ Rota @done(22-08-11 18:18)
      ✔ Controller @done(22-08-11 18:18)
      ✔ UseCase @done(22-08-16 22:41)
      ✔ Repository @done(22-08-11 18:19)
      ✔ Mapper @done(22-08-18 21:36)
        ✔ toPersistence (Customer) @done(22-08-17 19:13)
        ✔ toDomain (Customer) @done(22-08-17 21:11)
        ✔ toPersistence (Location) @done(22-08-11 18:21)
        ✔ toDomain (Location) @done(22-08-17 21:12) @lasted(13s)
        ✔ toDTO (Customer) @done(22-08-18 21:36)
      ☐ Dependency Injection (feature)
      ✘ Rollback on Save - Remover location criada se create customer der errado @cancelled(22-09-13 21:12)
    ☐ Get Customer by Email
      ✔ Domain @done(22-08-11 19:09)
        ✔ Entity @done(22-08-11 19:09)
        ✔ Interface @done(22-08-11 19:09)
      ✔ Rota @done(22-08-11 19:09)
      ✔ Controller @done(22-08-11 19:09)
      ✔ UseCase @done(22-08-11 19:10)
      ✔ Repository @done(22-08-11 19:10)
      ✔ Mapper @done(22-09-13 21:13)
        ✘ toPersistence @cancelled(22-09-13 21:13)
        ✔ toDomain @done(22-09-13 21:13)
      ☐ Dependency Injection (feature)
    ☐ Get All Customers
      ✔ Domain @done(22-08-11 19:11)
        ✔ Entity @done(22-08-11 19:11)
        ✔ Interface @done(22-08-11 19:11)
      ✔ Rota @done(22-08-11 19:11)
      ✔ Controller @done(22-08-11 19:11)
      ✔ UseCase @done(22-08-11 19:15)
      ✔ Repository @done(22-08-11 19:15)
      ✔ Mapper @done(22-09-13 21:14)
        ✘ toPersistence @cancelled(22-09-13 21:14)
        ✔ toDomain @done(22-09-13 21:14)
      ☐ Dependency Injection (feature)
    ☐ Update Customer
      ✔ Domain @done(22-08-11 19:15)
        ✔ Entity @done(22-08-11 19:15)
        ✔ Interface @done(22-08-11 19:15)
      ✔ Rota @done(22-08-11 19:15)
      ✔ Controller @done(22-08-11 19:15)
      ✔ UseCase @done(22-08-11 19:15)
      ✔ Repository @done(22-08-11 19:16)
      ✔ Mapper @done(22-09-13 21:14)
        ✔ toPersistence @done(22-09-13 21:14)
        ✔ toDomain @done(22-09-13 21:14)
      ☐ Dependency Injection (feature)
    ☐ Remove Customer
      ✔ Domain @done(22-08-11 19:16)
        ✔ Entity @done(22-08-11 19:16)
        ✔ Interface @done(22-08-11 19:16)
      ✔ Rota @done(22-08-11 19:16)
      ✔ Controller @done(22-08-11 19:16)
      ☐ UseCase
      ✔ Repository @done(22-08-11 19:16)
      ☐ Mapper
        ☐ toPersistence
        ☐ toDomain
      ☐ Dependency Injection (feature)
    ☐ Implement Base Controller
  