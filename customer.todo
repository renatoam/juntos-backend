You should develop:

  // On save(), check if the entity already exists and then perform the create or update.
  // With respect to doing the "create if not exists, else update", that's the type of complex data access logic that we don't want any other constructs in our domain to have to know about: only the repos should care about that.
  // https://khalilstemmler.com/articles/typescript-domain-driven-design/repository-dto-mapper/

  Customer:
  
  ☐ Filter by state;
  ☐ Search by name and/or last name;
  ☐ Pagination to navigate between cards;
  ☐ Navigation when clicking on customer cards;
  ☐ An internal page with more details of customers (use your creativity);
  ☐ We'll be happy (😍) if you write tests for it.
  
  Customers:
    ☐ Create Customer
      ✔ Domain @done(22-08-11 18:18)
        ✔ Entity @done(22-08-11 18:18)
        ✔ Interface @done(22-08-11 18:18)
      ✔ Rota @done(22-08-11 18:18)
      ✔ Controller @done(22-08-11 18:18)
      ✔ UseCase @done(22-08-16 22:41)
      ✔ Repository @done(22-08-11 18:19)
      ✔ Mapper @done(22-08-18 21:36)
        ✔ toPersistence (Customer) @done(22-08-17 19:13)
        ✔ toDomain (Customer) @done(22-08-17 21:11)
        ✔ toPersistence (Location) @done(22-08-11 18:21)
        ✔ toDomain (Location) @done(22-08-17 21:12) @lasted(13s)
        ✔ toDTO (Customer) @done(22-08-18 21:36)
      ☐ Dependency Injection (feature)
    ☐ Get Customer by Email
      ✔ Domain @done(22-08-11 19:09)
        ✔ Entity @done(22-08-11 19:09)
        ✔ Interface @done(22-08-11 19:09)
      ✔ Rota @done(22-08-11 19:09)
      ✔ Controller @done(22-08-11 19:09)
      ✔ UseCase @done(22-08-11 19:10)
      ✔ Repository @done(22-08-11 19:10)
      ✔ Mapper @done(22-09-13 21:13)
        ✔ toDomain @done(22-09-13 21:13)
      ☐ Dependency Injection (feature)
    ☐ Get All Customers
      ✔ Domain @done(22-08-11 19:11)
        ✔ Entity @done(22-08-11 19:11)
        ✔ Interface @done(22-08-11 19:11)
      ✔ Rota @done(22-08-11 19:11)
      ✔ Controller @done(22-08-11 19:11)
      ✔ UseCase @done(22-08-11 19:15)
      ✔ Repository @done(22-08-11 19:15)
      ✔ Mapper @done(22-09-13 21:14)
        ✔ toDomain @done(22-09-13 21:14)
      ☐ Dependency Injection (feature)
    ☐ Update Customer
      ✔ Domain @done(22-08-11 19:15)
        ✔ Entity @done(22-08-11 19:15)
        ✔ Interface @done(22-08-11 19:15)
      ✔ Rota @done(22-08-11 19:15)
      ✔ Controller @done(22-08-11 19:15)
      ✔ UseCase @done(22-08-11 19:15)
      ✔ Repository @done(22-08-11 19:16)
      ✔ Mapper @done(22-09-13 21:14)
        ✔ toPersistence @done(22-09-13 21:14)
        ✔ toDomain @done(22-09-13 21:14)
      ☐ Dependency Injection (feature)
    ☐ Remove Customer
      ✔ Domain @done(22-08-11 19:16)
        ✔ Entity @done(22-08-11 19:16)
        ✔ Interface @done(22-08-11 19:16)
      ✔ Rota @done(22-08-11 19:16)
      ✔ Controller @done(22-08-11 19:16)
      ✔ UseCase @done(22-09-14 22:07)
      ✔ Repository @done(22-08-11 19:16)
      ☐ Dependency Injection (feature)
    ☐ Implement Base Controller
  